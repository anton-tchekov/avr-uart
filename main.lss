
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000244  000002d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800100  00800100  000002d8  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000040  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00000a49  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000082f  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000046f  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000000f0  00000000  00000000  00001a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000004a2  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000026f  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000010  00000000  00000000  00002255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_18>
  4c:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_19>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000068 <__c.0>:
  68:	48 65 6c 6c 6f 20 57 6f 72 6c 64 21 00 00           Hello World!..

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	aa 32       	cpi	r26, 0x2A	; 42
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  96:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <uart_init>:
static volatile char _tb_start[UART_TRANSMIT_BUFFER_SIZE],
	*_tb_end, *_tb_read, *_tb_write;

void uart_init(void)
{
	UCSR0B = (1 << RXCIE0) | (1 << UDRIE0) | (1 << RXEN0) | (1 << TXEN0);
  9e:	88 eb       	ldi	r24, 0xB8	; 184
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = _BAUD;
  aa:	8f e5       	ldi	r24, 0x5F	; 95
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	_rb_read = _rb_write = _rb_start;
  b6:	89 e1       	ldi	r24, 0x19	; 25
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_rb_write+0x1>
  be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_rb_write>
  c2:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_rb_read+0x1>
  c6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_rb_read>
	_tb_read = _tb_write = _tb_start;
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_tb_write+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_tb_write>
  d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_tb_read+0x1>
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_tb_read>
}
  de:	08 95       	ret

000000e0 <uart_available>:

uint8_t uart_available(void)
{
	return _avail;
  e0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avail>
}
  e4:	08 95       	ret

000000e6 <uart_tx>:

void uart_tx(char c)
{
	if(UCSR0A & (1 << UDRE0))
  e6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  ea:	95 ff       	sbrs	r25, 5
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <uart_tx+0xe>
	{
		UDR0 = c;
  ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f2:	08 95       	ret
	}
	else
	{
		while(_tb_available >= UART_TRANSMIT_BUFFER_SIZE - 1) ;
  f4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_tb_available>
  f8:	9f 30       	cpi	r25, 0x0F	; 15
  fa:	e0 f7       	brcc	.-8      	; 0xf4 <uart_tx+0xe>

		++_tb_available;
  fc:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <_tb_available>
 100:	9f 5f       	subi	r25, 0xFF	; 255
 102:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <_tb_available>
		*_tb_write++ = c;
 106:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_tb_write>
 10a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_tb_write+0x1>
 10e:	9f 01       	movw	r18, r30
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
 114:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_tb_write+0x1>
 118:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_tb_write>
 11c:	80 83       	st	Z, r24
		if(_tb_write == _tb_end)
		{
			_tb_write = _tb_start;
		}
	}
}
 11e:	08 95       	ret

00000120 <uart_rx>:

int16_t uart_rx(void)
{
	int16_t c = -1;
	if(_avail)
 120:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avail>
 124:	88 23       	and	r24, r24
 126:	91 f0       	breq	.+36     	; 0x14c <uart_rx+0x2c>
	{
		--_avail;
 128:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avail>
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avail>
		c = *_rb_read++;
 132:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <_rb_read>
 136:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <_rb_read+0x1>
 13a:	cf 01       	movw	r24, r30
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <_rb_read+0x1>
 142:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <_rb_read>
 146:	80 81       	ld	r24, Z
 148:	90 e0       	ldi	r25, 0x00	; 0
		if(_rb_read == _rb_end)
 14a:	08 95       	ret
	int16_t c = -1;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	9f ef       	ldi	r25, 0xFF	; 255
			_rb_read = _rb_start;
		}
	}

	return c;
}
 150:	08 95       	ret

00000152 <uart_tx_str>:

void uart_tx_str(const char *s)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
	register char c;
	while((c = *s++))
 156:	ec 01       	movw	r28, r24
 158:	89 91       	ld	r24, Y+
 15a:	81 11       	cpse	r24, r1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <uart_tx_str+0x12>
	{
		uart_tx(c);
	}
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret
		uart_tx(c);
 164:	0e 94 73 00 	call	0xe6	; 0xe6 <uart_tx>
	while((c = *s++))
 168:	ce 01       	movw	r24, r28
 16a:	f5 cf       	rjmp	.-22     	; 0x156 <uart_tx_str+0x4>

0000016c <uart_tx_str_P>:

void uart_tx_str_P(const char *s)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
	register char c;
	while((c = pgm_read_byte(s++)))
 172:	fe 01       	movw	r30, r28
 174:	84 91       	lpm	r24, Z
 176:	21 96       	adiw	r28, 0x01	; 1
 178:	81 11       	cpse	r24, r1
 17a:	03 c0       	rjmp	.+6      	; 0x182 <uart_tx_str_P+0x16>
	{
		uart_tx(c);
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret
		uart_tx(c);
 182:	0e 94 73 00 	call	0xe6	; 0xe6 <uart_tx>
 186:	f5 cf       	rjmp	.-22     	; 0x172 <uart_tx_str_P+0x6>

00000188 <__vector_18>:

ISR(USART_RX_vect)
{
 188:	8f 93       	push	r24
 18a:	8f b7       	in	r24, 0x3f	; 63
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
	if(_avail < UART_RECEIVE_BUFFER_SIZE)
 194:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avail>
 198:	80 31       	cpi	r24, 0x10	; 16
 19a:	90 f4       	brcc	.+36     	; 0x1c0 <__vector_18+0x38>
	{
		++_avail;
 19c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <_avail>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <_avail>
		*_rb_write++ = UDR0;
 1a6:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <_rb_write>
 1aa:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <_rb_write+0x1>
 1ae:	cf 01       	movw	r24, r30
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <_rb_write+0x1>
 1b6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_rb_write>
 1ba:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1be:	80 83       	st	Z, r24
		if(_rb_write == _rb_end)
		{
			_rb_write = _rb_start;
		}
	}
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	8f bf       	out	0x3f, r24	; 63
 1ca:	8f 91       	pop	r24
 1cc:	18 95       	reti

000001ce <__vector_19>:

ISR(USART_UDRE_vect)
{
 1ce:	8f 93       	push	r24
 1d0:	8f b7       	in	r24, 0x3f	; 63
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	if(_tb_available)
 1da:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_tb_available>
 1de:	88 23       	and	r24, r24
 1e0:	f1 f0       	breq	.+60     	; 0x21e <__vector_19+0x50>
	{
		--_tb_available;
 1e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <_tb_available>
 1e6:	81 50       	subi	r24, 0x01	; 1
 1e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_tb_available>
		UDR0 = *_tb_read++;
 1ec:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <_tb_read>
 1f0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <_tb_read+0x1>
 1f4:	cf 01       	movw	r24, r30
 1f6:	01 96       	adiw	r24, 0x01	; 1
 1f8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_tb_read+0x1>
 1fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_tb_read>
 200:	80 81       	ld	r24, Z
 202:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if(_tb_read == _tb_end)
 206:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_tb_read>
 20a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_tb_read+0x1>
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	31 f4       	brne	.+12     	; 0x21e <__vector_19+0x50>
		{
			_tb_read = _tb_start;
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <_tb_read+0x1>
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_tb_read>
		}
	}
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	8f bf       	out	0x3f, r24	; 63
 228:	8f 91       	pop	r24
 22a:	18 95       	reti

0000022c <main>:
#include <avr/pgmspace.h>

int main(void)
{
	int16_t c;
	uart_init();
 22c:	38 df       	rcall	.-400    	; 0x9e <uart_init>
	uart_tx_str_P(PSTR("Hello World!"));
 22e:	88 e6       	ldi	r24, 0x68	; 104
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	9c df       	rcall	.-200    	; 0x16c <uart_tx_str_P>
	for(;;)
	{
		c = uart_rx();
 234:	75 df       	rcall	.-278    	; 0x120 <uart_rx>
		if(c > 0)
 236:	18 16       	cp	r1, r24
 238:	19 06       	cpc	r1, r25
 23a:	e4 f7       	brge	.-8      	; 0x234 <main+0x8>
		{
			uart_tx(c);
 23c:	54 df       	rcall	.-344    	; 0xe6 <uart_tx>
 23e:	fa cf       	rjmp	.-12     	; 0x234 <main+0x8>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
